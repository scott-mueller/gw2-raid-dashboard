{"version":3,"sources":["components/Counter/Counter.module.css","apis/counterAPI.js","redux/reducers/counter/counterSlice.js","redux/actions/index.js","redux/reducers/collector.js","redux/sagas/collectorSaga.js","redux/store.js","serviceWorker.js","pages/App/logo.svg","components/Counter/Counter.js","pages/App/App.js","pages/Collector/Collector.js","routes.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","FETCH_COLLECTOR_DATA","FETCH_COLLECTOR_DATA_RESPONSE","stats","fetching","collectorStatsReducer","type","fetchCollectorData","put","foo","collectorSaga","takeEvery","rootReducer","combineReducers","counterReducer","collectorStats","Boolean","window","location","hostname","match","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","asyncButton","getState","App","src","logo","alt","href","rel","Collector","JSON","stringify","Routes","basename","to","exact","path","component","Home","About","store","sagaMiddleware","createSagaMiddleware","middlewares","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","run","collectorStatsSaga","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fe13354.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__qB-H1\",\"value\":\"Counter_value__2-sRl\",\"button\":\"Counter_button__3DWPw\",\"textbox\":\"Counter_textbox__13qA1\",\"asyncButton\":\"Counter_asyncButton__3Hket Counter_button__3DWPw\"};","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from '../../../apis/counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","export const FETCH_COLLECTOR_DATA = 'FETCH_COLLECTOR_DATA';\nexport const FETCH_COLLECTOR_DATA_RESPONSE = 'FETCH_COLLECTOR_DATA_RESPONSE';","import { FETCH_COLLECTOR_DATA, FETCH_COLLECTOR_DATA_RESPONSE } from \"../actions\";\n\nconst initialState = {\n    stats: {},\n    fetching: false\n};\n\nconst collectorStatsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_COLLECTOR_DATA: {\n            return {\n                ...state,\n                fetching: true\n            }\n        }\n        case FETCH_COLLECTOR_DATA_RESPONSE: {\n            return {\n                ...state,\n                fetching: false,\n                stats: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport default collectorStatsReducer;\n","import { put, takeEvery } from 'redux-saga/effects';\nimport { FETCH_COLLECTOR_DATA, FETCH_COLLECTOR_DATA_RESPONSE } from '../actions';\n\nconst fetchCollectorData = function*(action) {\n    yield put({type: FETCH_COLLECTOR_DATA_RESPONSE, payload: {foo: 'bar'}})\n}\n\nconst collectorSaga = function*() {\n    yield takeEvery(FETCH_COLLECTOR_DATA, fetchCollectorData);\n};\nexport default collectorSaga;\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Reducers\nimport counterReducer from './reducers/counter/counterSlice';\nimport collectorStatsReducer from './reducers/collector';\n\n// Sagas\nimport collectorStatsSaga from './sagas/collectorSaga';\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n  collectorStats: collectorStatsReducer\n});\n\nexport default function configureStore(initialState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n\n  const store = createStore(rootReducer, initialState, composedEnhancers);\n\n  sagaMiddleware.run(collectorStatsSaga);\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from '../../redux/reducers/counter/counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from '../../components/Counter/Counter';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <p>\n          We did it!\n        </p>\n        <span>\n          <span>Learn </span>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux-toolkit.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Toolkit\n          </a>\n          ,<span> and </span>\n          <a\n            className=\"App-link\"\n            href=\"https://react-redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Redux\n          </a>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FETCH_COLLECTOR_DATA } from '../../redux/actions';\n\nconst Collector = () => {\n\n    const dispatch = useDispatch();\n    const stats = useSelector((state) => state.collectorStats);\n\n    const dispatchAction = () => {\n        return dispatch({type: FETCH_COLLECTOR_DATA})\n    }\n\n    return (\n        <div>\n            <p>Hello Collector</p>\n            <button onClick={dispatchAction}>Click me!</button>\n            <p>{JSON.stringify(stats)}</p>\n        </div>\n    )\n};\n\nexport default Collector;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport App from \"./pages/App/App\";\nimport Collector from \"./pages/Collector/Collector\";\n\nexport default function Routes() {\n  return (\n    <Router basename=\"/\">\n        <div>\n            <ul>\n                 <li><Link to=\"/\">Home</Link></li>\n                 <li><Link to=\"/about\">About</Link></li>\n            </ul>\n            <hr />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/collector\">\n                <Collector />\n            </Route>\n            <Route path=\"/app\">\n                <App />\n            </Route>\n        </div>\n    </Router>\n  );\n}\n\nconst Home = () => <div><h2>Home</h2></div>\nconst About = () => <div><h2>About</h2></div>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport configureStore from './redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}